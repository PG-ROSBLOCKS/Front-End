import { Component, ElementRef, ViewChild } from '@angular/core';
import { Location } from '@angular/common';
import { Router } from '@angular/router';

@Component({
  selector: 'app-rosblocks-help',
  templateUrl: './rosblocks-help.component.html',
  styleUrls: ['./rosblocks-help.component.css']
})
export class RosblocksHelpComponent {

  constructor(
    private location: Location, // Imported from @angular/common
    private router: Router
  ) {}


  dropdowns: { [key: number]: boolean } = {};
  selectedVideo: string | null = null;

  onSearch(event: any): void {
    console.log('searching:', event.target.value);
  }

  toggleDropdown(id: number): void {
    this.dropdowns[id] = !this.dropdowns[id];
  }

  selectVideo(url: string) {
    this.selectedVideo = url;
    const videoData = this.videoSections.find(video => video.url === url);
    if (videoData) {
      this.selectedTitle = videoData.title;
      this.selectedDescription = videoData.description;
    } else {
      this.selectedTitle = '';
      this.selectedDescription = [];
    }
  }

  goBack(): void {
    // `navigationId` > 1 means there is a previous route in Angular‚Äôs history
    if (window.history.state?.navigationId > 1) {
      this.location.back();
    } else {
      this.router.navigate(['/workspace']); // Fallback to landing
    }
  }

    
  videoSections = [
    {
      url: 'https://www.youtube.com/embed/3n1agY5XYOk?si=QdJwRjAO0jIiE1xs',
      title: 'Introducci√≥n a ROSBlocks',
      description: [
`ROSBlocks es una innovadora herramienta de aprendizaje en l√≠nea dise√±ada para ense√±ar a los usuarios sobre el sistema operativo de rob√≥tica ROS 2. Se expone que ROSBlocks utiliza un enfoque basado en bloques, similar a plataformas educativas como Scratch y Lego Mindstorms, donde cada bloque representa un segmento de c√≥digo.
      
Esta metodolog√≠a permite a los usuarios, especialmente a j√≥venes y principiantes en rob√≥tica, aprender conceptos importantes como el funcionamiento de nodos, t√≥picos, servicios y mensajer√≠a en ROS 2. A trav√©s de la conexi√≥n de bloques, los estudiantes pueden generar un c√≥digo en Python que es ejecutable en un entorno de ROS 2.`,
`üë©‚Äçüéì P√∫blico objetivo:
ROSBlocks est√° dise√±ada para cualquier persona interesada en la rob√≥tica y el aprendizaje de ROS 2, promoviendo el aprendizaje por la rob√≥tica.
      
üõ†Ô∏è Metodolog√≠a de bloques:
La metodolog√≥ia de ense√±anza por bloques de programaci√≥n permite a los principiantes visualizar y entender la l√≥gica detr√°s del c√≥digo, facilitando el aprendizaje conceptual.
      
üåç Fomento de experiencias pr√°cticas:
ROSBlocks promueve el aprendizaje a trav√©s de la pr√°ctica activa, lo cual es esencial en la educaci√≥n t√©cnica.
      
‚è≥ Curva de aprendizaje acelerada:
La programaci√≥n por bloques ofrece un nivel de abstracci√≥n de c√≥digo que ayuda a comprender con mayor facilidad como funciona la l√≥gica program√°tica de ROS 2, lo cual permite dominar conceptos clave en rob√≥tica de forma m√°s r√°pida e intuitiva.

ü§ñ Atractivo para educadores:
ROSBlocks tambi√©n es una herramienta √∫til para docentes que buscan nuevas formas de ense√±ar programaci√≥n y rob√≥tica en sus clases, potenciando la experiencia educativa integral.`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/QEOcgvTbHLM?si=LuHonW5Bu9qf9RWL',
      title: 'Funcionalidades b√°sicas',
      description: [
`El tutorial presenta una introducci√≥n a las funcionalidades b√°sicas de la herramienta donde los usuarios aprenden a crear nodos, nombrarlos, y gestionar los bloques que los componen. Tambi√©n se explica c√≥mo duplicar, iniciar y detener nodos, visualizar su informaci√≥n desde consolas, explorar las secciones de bloques disponibles y c√≥mo se genera el c√≥digo Python correspondiente a cada acci√≥n. Finalmente, se introduce el uso del simulador TurtleSim para observar el comportamiento del robot en diferentes escenarios.`,
`üåê Funcionamiento del Sistema de Nodos:
Cada nodo opera como un proceso independiente dentro de ROS 2. Comprender esta arquitectura es esencial para construir aplicaciones rob√≥ticas modulares y eficientes.

üí° Interacci√≥n Visual en ROSBlocks: 
La interfaz permite arrastrar bloques de manera visual para componer c√≥digo.

‚öôÔ∏è Duplicar y Eliminar Nodos:
Duplicar nodos ahorra tiempo al desarrollar estructuras repetitivas, mientras que eliminarlos permite depurar o reorganizar el proyecto con facilidad.

üìú C√≥digo en Python:
Cada bloque genera autom√°ticamente c√≥digo en Python. Este c√≥digo puede ser exportado y ejecutado en otros entornos.
      
üê¢ Simulador TurtleSim:
El simulador ayudando a entender c√≥mo responde a las instrucciones codificadas en distintos escenarios.
      
‚ö†Ô∏è Gesti√≥n de Consolas por Nodo:
Cada nodo tiene su consola dedicada que permite monitorear su comportamiento.
      
üéõÔ∏è Funcionalidades de Guardado y Carga:
ROSBlocks permite guardar y cargar proyectos.`,
      ]
      
    },
    {
      url: 'https://www.youtube.com/embed/yhh464-fKWI?si=F6I4RLbClCGigqbN',
      title: 'Correcta gesti√≥n de recursos y bloques',
      description: [
`Este video se enfoca en la gesti√≥n eficaz de los recursos y el uso adecuado de los bloques en la construcci√≥n de nodos dentro de ROSBlocks.
      
Se explica c√≥mo cada nodo o pesta√±a representa un proceso que consume recursos del sistema, y c√≥mo su uso descontrolado puede afectar negativamente el rendimiento.
      
Tambi√©n se muestra que ciertos bloques requieren de otros bloques complementarios para poder ejecutarse correctamente.
      
Se enfatiza la importancia de pausar la ejecuci√≥n al hacer cambios en los bloques y prestar atenci√≥n a los errores y advertencias generados por el sistema, los cuales gu√≠an el desarrollo correcto del proyecto.`,
      
`üìà Gesti√≥n de recursos y rendimiento:
Limitar la cantidad de nodos o pesta√±as activas mejora la eficiencia del sistema y garantiza una experiencia m√°s fluida.
      
üîç Procesos y analog√≠as pr√°cticas:
La comparaci√≥n con pesta√±as en un navegador ayuda a visualizar c√≥mo los nodos afectan el uso de CPU y memoria.
      
üîó Estructura l√≥gica de bloques:
Algunos bloques no funcionan de forma aislada. Entender las dependencias es clave para armar proyectos funcionales y coherentes.
      
‚ö° Resoluci√≥n activa de errores:
El sistema notifica problemas, lo que permite tener retroalimentaci√≥n de que corregir para tener una ejecuci√≥n correcta del c√≥digo.
      
üõë Necesidad de pausar y recompilar:
Modificar bloques mientras se ejecuta un nodo hace que este se pause. Es necesario reiniciar nuevamente el nodo para que los cambios surtan efecto.`
      ]
      
    },
    {
      url: 'https://www.youtube.com/embed/OuZQJktaxN8?si=fc4FCzmqNSJLZ0-7',
      title: 'Hola mundo',
      description: [
`Este tutorial introduce a los usuarios en las funciones b√°sicas de programaci√≥n utilizando bloques en el entorno RosBlocks.

El video explica el papel fundamental de los nodos dentro del sistema ROS 2, mostrando c√≥mo cada nodo representa un proceso que ejecuta instrucciones definidas visualmente. A trav√©s de la uni√≥n de bloques, se genera c√≥digo que luego puede ser ejecutado por el sistema.

Se gu√≠a al usuario para crear un nodo llamado ‚Äúejercicio uno‚Äù y desarrollar un ejemplo sencillo: imprimir el texto ‚ÄúHola Mundo‚Äù en la consola usando bloques. Tambi√©n se presenta el uso de bloques para imprimir valores num√©ricos o concatenar textos, fomentando una exploraci√≥n activa del entorno.`,

`üîó Importancia de los nodos:
Cada nodo funciona como una unidad de ejecuci√≥n en ROS. Comprender su funci√≥n es esencial para construir programas rob√≥ticos efectivos y modulares.

üë©‚Äçüíª Uso del bloque ‚Äúprint‚Äù:
Mostrar resultados en la consola mediante el bloque ‚Äúprint‚Äù permite verificar el comportamiento del c√≥digo, una t√©cnica esencial para cualquier programador.

üî† Concatenaci√≥n de cadenas:
Se presenta c√≥mo unir textos din√°micamente con bloques de concatenaci√≥n, una habilidad b√°sica pero √∫til en m√∫ltiples contextos de programaci√≥n.

üìä Flujo de ejecuci√≥n:
Se introduce el bloque ‚Äúinit‚Äù como punto de partida del programa, ayudando a los usuarios a entender el orden de ejecuci√≥n dentro de los nodos.
`
]
    },
    {
      url: 'https://www.youtube.com/embed/ywTdRU6jq0M?si=EptUYYzOy-rMX6iB',
      title: 'Operadores matem√°ticos',
      description: [
  `En el tutorialse presenta un enfoque pr√°ctico sobre el uso de operadores matem√°ticos en la programaci√≥n con bloques.

Se introducen operaciones b√°sicas como suma, resta, multiplicaci√≥n, divisi√≥n y exponenciaci√≥n, junto con funciones m√°s avanzadas como ra√≠ces cuadradas, funciones trigonom√©tricas y generaci√≥n de n√∫meros aleatorios. Mediante ejemplos, como la suma de 1 + 2, se demuestra c√≥mo utilizar estos bloques y visualizar los resultados en la consola, motivando a los usuarios a experimentar por su cuenta.`,

  `üß† Conceptos clave del tutorial:

üìä Fundamentos de la programaci√≥n matem√°tica:
Comprender c√≥mo se utilizan los operadores matem√°ticos es esencial para cualquier programador, ya que permiten resolver problemas y expresar l√≥gicas num√©ricas dentro del c√≥digo.

üöÄ Ejercicios pr√°cticos:
El tutorial refuerza los conceptos al mostrar resultados en tiempo real, como calcular sumas o generar valores aleatorios.

üéØ La consola como herramienta de feedback:
Observar la salida de los c√°lculos en la consola permite validar el comportamiento del c√≥digo al instante, facilitando el proceso de depuraci√≥n y comprensi√≥n.`
]      
    },
    {
      url: 'https://www.youtube.com/embed/sKIScjO1Gn4?si=0eHLwqqwnjYcnrJb',
      title: 'Condicionales',
      description: [
  `En el tutorial se introduce el uso de operadores condicionales en programaci√≥n mediante bloques.

Se presenta la l√≥gica de instrucciones condicionales como ‚Äúif‚Äù y ‚Äúif-else‚Äù, que permiten ejecutar bloques de c√≥digo seg√∫n el cumplimiento o no de una condici√≥n.

Con ejemplos pr√°cticos, se demuestra c√≥mo comparar n√∫meros (por ejemplo, si dos valores son iguales), y c√≥mo usar operadores l√≥gicos para manejar distintos resultados. Tambi√©n se aborda el concepto de negaci√≥n l√≥gica, mostrando c√≥mo una condici√≥n falsa puede invertir el flujo de ejecuci√≥n.`,

  `üß† Conceptos clave del tutorial:

üìà La importancia de los condicionales:
Los condicionales permiten que un programa tome decisiones basadas en informaci√≥n evaluada en tiempo real. Son esenciales para introducir l√≥gica din√°mica en cualquier aplicaci√≥n.

üìè Comparaciones directas:
Comparar valores como ‚Äú¬ø1 es igual a 2?‚Äù ayuda a entender de forma clara c√≥mo se implementa la l√≥gica b√°sica en un flujo program√°tico.

üß© Estructuras de control:
Instrucciones como ‚Äúif‚Äù y ‚Äúif-else‚Äù permiten que el flujo del programa se bifurque seg√∫n condiciones, lo cual es la base de algoritmos m√°s avanzados.

‚ùå Negaci√≥n y l√≥gica inversa:
El operador de negaci√≥n ofrece flexibilidad para invertir condiciones y tomar decisiones en escenarios m√°s complejos.`
]
    },
    {
      url: 'https://www.youtube.com/embed/HkH_jvJuW6I?si=pH--FQet96HGhy9b',
      title: 'Variables',
      description: [
  `En el tutorial se introduce el concepto y uso de las variables en la programaci√≥n mediante bloques.

Se muestra c√≥mo crear una variable llamada ‚Äú√≠tem‚Äù con un valor de 10, imprimir su contenido en consola y luego crear otra variable llamada ‚Äúmundo‚Äù con el mismo valor. Posteriormente, se realiza una suma entre ambas, ilustrando los conceptos fundamentales de asignaci√≥n, uso y manipulaci√≥n de variables en un entorno visual.`,

  `üß† Conceptos clave del tutorial:

üéØ Las variables son fundamentales en programaci√≥n:
Permiten almacenar, modificar y reutilizar informaci√≥n dentro de un programa, asimismo, son la base para construir l√≥gica din√°mica y resolver problemas de forma estructurada.

üìê Operadores matem√°ticos en programaci√≥n:
Aplicar operadores sobre variables permite resolver tareas m√°s complejas y simula escenarios reales de programaci√≥n.`
]
    },
    {
      url: 'https://www.youtube.com/embed/mDGx1dLg2pM?si=pQcpR53LKwg-lLUE',
      title: 'Bucles',
      description: [
  `En el tutoria de la secci√≥n dos de ROSBlocks, se aborda el uso de bucles como estructuras fundamentales para repetir instrucciones en la programaci√≥n con bloques.

El ejercicio inicia introduciendo un bucle que repite la misma acci√≥n diez veces, con una pausa entre cada iteraci√≥n para mostrar c√≥mo se imprime el n√∫mero 15 secuencialmente.

El tutorial avanza con el uso de una variable que define la cantidad de repeticiones del bucle, mostrando c√≥mo se puede controlar el flujo seg√∫n los valores definidos por el usuario. Tambi√©n se presenta el bucle ‚Äúwhile‚Äù, el cual contin√∫a ejecut√°ndose mientras se cumpla una condici√≥n l√≥gica, y se advierte sobre el riesgo de crear bucles infinitos.

Finalmente, se explora el bucle de conteo, donde se inicializa una variable y se imprime su valor dentro de un rango espec√≠fico.`,

  `üß† Conceptos clave del tutorial:

üîÑ Uso de bucles en programaci√≥n:
Los bucles permiten ejecutar bloques de c√≥digo m√∫ltiples veces, facilitando tareas repetitivas y reduciendo la necesidad de escribir instrucciones duplicadas.

‚è±Ô∏è Ejemplo pr√°ctico de repetici√≥n:
Repetir la impresi√≥n de un valor con pausas visibles demuestra c√≥mo el flujo de ejecuci√≥n puede ser controlado temporalmente y ayuda a visualizar el comportamiento del c√≥digo.

üìä Variables para control de iteraciones:
Utilizar variables para determinar cu√°ntas veces se ejecuta un bucle ofrece flexibilidad y permite parametrizar la ejecuci√≥n.

‚ö†Ô∏è Precauci√≥n con bucles infinitos:
Los bucles ‚Äúwhile‚Äù pueden ejecutarse sin fin si no se controlan correctamente. El tutorial advierte sobre su uso responsable para evitar consumo excesivo de recursos.

üî¢ Bucle de contar:
El incremento de una variable en cada iteraci√≥n permite recorrer rangos y realizar acciones dependientes del n√∫mero actual de la repetici√≥n.`
]
    },
    {
      url: 'https://www.youtube.com/embed/jqcUW2ZM0Ik?si=WNMpNRw8ZpFcF76m',
      title: '¬øC√≥mo funcionan los t√≥picos?',
      description: [
        `En eltutorial se abordan los fundamentos de los t√≥picos como mecanismo de comunicaci√≥n entre nodos en un sistema distribuido.

Se introduce el concepto del t√≥pico como un contenedor de mensajes donde un nodo publicador env√≠a datos, y un nodo suscriptor los recibe. Esta arquitectura permite una transmisi√≥n eficiente y desacoplada de informaci√≥n.

El video presenta un diagrama explicativo que ilustra c√≥mo los datos fluyen desde el nodo que publica hacia aquellos que est√°n suscritos, mostrando una estructura escalable y clara. Adem√°s, se destaca la incorporaci√≥n de m√∫sica en el video como un recurso para mejorar la experiencia de aprendizaje.`,

  `üß† Conceptos clave del tutorial:

üîÑ Funcionalidad del T√≥pico:
Los t√≥picos son canales de comunicaci√≥n que permiten que m√∫ltiples nodos intercambien mensajes de manera organizada, sin necesidad de conexiones directas entre ellos.

üìú Roles de Nodos:
El nodo publicador emite datos hacia el t√≥pico, mientras que el suscriptor est√° encargado de recibirlos. Ambos deben funcionar de forma coordinada para lograr una comunicaci√≥n efectiva.`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/HYLY4aPUVY8?si=HnrKPWu2j1XeVSY_',
      title: 'Ejercicio de t√≥picos',
      description: [
        `En el tutorial se presenta un ejercicio pr√°ctico del patr√≥n publicador-suscriptor.

El tutorial gu√≠a a los usuarios en la creaci√≥n de dos nodos: uno para publicar mensajes y otro para suscribirse a ellos. Se crean dos espacios de trabajo, ‚Äúpublicador‚Äù y ‚Äúsuscriptor‚Äù, y se explica c√≥mo asignar roles espec√≠ficos a cada nodo.

Se muestra la importancia de usar el mismo nombre de t√≥pico en ambos nodos para establecer la comunicaci√≥n, y se demuestra c√≥mo m√∫ltiples suscriptores pueden conectarse a un √∫nico publicador. Tambi√©n se evidencia que si los nombres de los t√≥picos no coinciden, la comunicaci√≥n no ocurre.

El video concluye ense√±ando c√≥mo visualizar los t√≥picos activos del sistema para monitorear y verificar el funcionamiento correcto de los nodos.`,

  `üß† Conceptos clave del tutorial:

üìä Configuraci√≥n de nodos es crucial:
Asignar correctamente los roles de publicador y suscriptor y asegurarse de que ambos usen el mismo nombre de t√≥pico garantiza una comunicaci√≥n exitosa.

üìû Importancia del tipo de datos:
Especificar correctamente el tipo de mensaje (por ejemplo, string) permite que los datos sean entendidos por los suscriptores.

‚è≤Ô∏è Bucles para repetici√≥n de mensajes:
El uso de bucles permite enviar m√∫ltiples mensajes de manera controlada, ajustando la frecuencia y cantidad seg√∫n las necesidades del sistema.

üì• Flexibilidad con m√∫ltiples suscriptores:
Un mismo t√≥pico puede ser escuchado por varios nodos suscriptores.

üìà Visualizaci√≥n de t√≥picos activos:
ROSBlocks permite ver los t√≥picos activos en tiempo real, lo cual es una herramienta clave para diagnosticar fallos o verificar que los nodos est√°n correctamente conectados.`
      ]      
    },
    {
      url: 'https://www.youtube.com/embed/kfTGi7bi8Lg?si=ujLwSrLUQOdRO87g',
      title: '¬øC√≥mo funcionan los servicios?',
      description: [
  `En el tutorial se introduce el modelo de comunicaci√≥n cliente-servidor.

En este modelo, un nodo cliente env√≠a una solicitud a un servicio, esperando una respuesta activa. Esto significa que la comunicaci√≥n requiere que el servidor est√© siempre activo y disponible para responder, estableciendo una relaci√≥n directa y dependiente entre ambos componentes.

El tutorial destaca c√≥mo esta interacci√≥n sincr√≥nica es fundamental en aplicaciones que requieren respuestas inmediatas o transacciones completas. Se aclara que, a diferencia del publicador que puede enviar su mensaje y desconectarse, el cliente debe esperar la respuesta del servidor para continuar su ejecuci√≥n.`,

  `üß† Conceptos clave del tutorial:

üìä Interacci√≥n Cliente-Servidor:
El cliente inicia la comunicaci√≥n y espera una respuesta directa del servidor. Esta relaci√≥n sincr√≥nica es la base de la mayor√≠a de aplicaciones web y m√≥viles modernas.

üõ†Ô∏è Dependencia del Servidor:
El servidor debe estar operativo continuamente para responder a las solicitudes. Si el servidor falla o se desconecta, el cliente queda inactivo, afectando la experiencia del usuario.

‚öñÔ∏è Comparativa con Publicador-Suscriptor:
En el modelo cliente-servidor, el flujo de comunicaci√≥n depende completamente del servidor, a diferencia del modelo publicador-suscriptor que es m√°s desacoplado y flexible.`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/bYQr1gWEfBg?si=0oSj-T62FgN0vMjP',
      title: 'Ejercicio de servicios',
      description: [
        `En el tutorial se desarrolla un ejercicio pr√°ctico para construir un modelo cliente-servidor utilizando un servicio llamado ‚Äúsuma‚Äù.

El proceso comienza con la creaci√≥n del servicio, dividido en una secci√≥n de solicitud (request), donde se ingresan dos n√∫meros, y una secci√≥n de respuesta (response), donde se devuelve el resultado de la operaci√≥n. Se construyen dos nodos: uno act√∫a como servidor y el otro como cliente.

El servidor espera solicitudes y responde con la suma de los dos n√∫meros proporcionados. Si no responde dentro de un tiempo definido, el cliente muestra un mensaje de espera. Tambi√©n se muestra c√≥mo imprimir el resultado en la consola y realizar m√∫ltiples repeticiones de la operaci√≥n para observar la din√°mica completa del servicio.`,

  `üß† Conceptos clave del tutorial:

üîç Entendimiento del servicio ROS 2:
Los servicios permiten establecer comunicaciones bidireccionales en ROS 2, facilitando la ejecuci√≥n de operaciones espec√≠ficas bajo demanda entre nodos.

üåê Interacci√≥n as√≠ncrona:
El manejo del tiempo de espera entre cliente y servidor asegura una interacci√≥n fluida sin bloquear el sistema, previniendo cuelgues durante el intercambio de datos.`
      ]      
    },
    {
      url: 'https://www.youtube.com/embed/FjxuTH_zGeA?si=SfLwO8g3ZjhXElz6',
      title: 'Ejercicio de custom messages',
      description: [
  `En el tutorial se ense√±a c√≥mo crear mensajes personalizados (custom messages).

El tutorial inicia con una revisi√≥n del men√∫ de bloques disponibles para definir tipos de variables y estructuras de mensaje. A continuaci√≥n, se gu√≠a al usuario en la creaci√≥n de su propio tipo de mensaje, que representar√° un sensor de temperatura, y en la configuraci√≥n de un publicador que emite datos de temperatura generados aleatoriamente.

Paralelamente, se construye un nodo suscriptor capaz de recibir esos mensajes y mostrar los datos en la consola. Se resalta la importancia de mantener coherencia en los nombres de t√≥picos y sensores para asegurar la correcta comunicaci√≥n entre nodos. El video concluye con una demostraci√≥n funcional del env√≠o y recepci√≥n de mensajes personalizados.`,

  `üß† Conceptos clave del tutorial:

üìã Creaci√≥n de mensajes personalizados:
Dise√±ar estructuras de datos a medida permite adaptar la comunicaci√≥n a las necesidades espec√≠ficas del sistema.
`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/4yl0FtIFwwQ?si=x56pXq1Ql5SIYNpP',
      title: 'Introducci√≥n a Turtlesim',
      description: [
  `En este m√≥dulo se introduce el comportamiento de un robot simulado con Turtlesim.

Este simulador es una herramienta educativa ideal para practicar conceptos fundamentales de rob√≥tica en un entorno seguro, visual e interactivo, sin necesidad de hardware f√≠sico.`, 

  `üß† Conceptos clave del tutorial:

üéØ Interacci√≥n con el entorno:
Turtlesim permite interactuar con un espacio virtual que emula c√≥mo se comportar√≠a un robot real, facilitando la comprensi√≥n de acciones como desplazamientos, giros y trayectorias.

üåç Versatilidad en simulaciones:
Los usuarios pueden controlar una o varias tortugas, dise√±ar movimientos personalizados y simular diferentes comportamientos que reflejan situaciones reales en rob√≥tica.

üë©‚Äçüè´ Aplicaci√≥n en la educaci√≥n:
Turtlesim es una herramienta valiosa para docentes que desean ense√±ar rob√≥tica de forma visual, clara y atractiva, integrando teor√≠a y pr√°ctica de forma did√°ctica.`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/8F5Q3jEI7vc?si=JjuMltC4XHJDD3ob',
      title: 'Funcionalidades, mapas predeterminados y personalizados',
      description: [
  `En este tutorial se explican las funcionalidades del simulador, incluyendo el control del movimiento de la tortuga, el uso de t√≥picos, y la personalizaci√≥n de mapas.

Se introduce el t√≥pico encargado de definir la velocidad lineal y angular de la tortuga, lo que permite controlar su movimiento en el entorno. Tambi√©n se abordan otros t√≥picos que permiten cambiar el color del pincel, el grosor del trazo y pausar la tortuga. 

Adem√°s, se presenta la posibilidad de utilizar mapas predeterminados (vac√≠o, con obst√°culos y laberinto), as√≠ como crear mapas personalizados mediante matrices binarias. El video concluye con una aclaraci√≥n sobre la regeneraci√≥n aleatoria de la tortuga en cada reinicio del simulador, lo que a√±ade dinamismo a las pruebas realizadas.`,

  `üß† Conceptos clave del tutorial:

üìä Entendiendo los t√≥picos:
Dominar el uso de t√≥picos en ROS es esencial para interactuar con la tortuga, ya que cada aspecto de su comportamiento se controla a trav√©s de estos canales.

üêç Funcionalidad de ‚Äúcmd_vel‚Äù:
Este t√≥pico espec√≠fico permite modificar la velocidad de desplazamiento y rotaci√≥n, ajustando el comportamiento din√°mico de la tortuga en tiempo real.

üé≠ Interacci√≥n con colores:
Cambiar el color y el grosor del trazo de la tortuga no solo agrega un elemento visual atractivo, sino que tambi√©n permite representar trayectorias.

üß© Creaci√≥n de mapas propios:
Usar matrices de ceros y unos para definir mapas personalizados abre posibilidades para dise√±ar entornos √∫nicos, fomentando la creatividad y el aprendizaje experimental.

üîÑ Reinicio del simulador:
Al reiniciar el entorno, se genera una tortuga nueva, lo que impide configurar una tortuga fija, pero aporta variedad a los ejercicios.

‚öñÔ∏è Restricciones en mapas:
Los mapas deben ser cuadr√°ticos, lo que requiere planificaci√≥n cuidadosa para evitar errores y aprovechar al m√°ximo el espacio disponible.

üìè Simulaci√≥n de colisiones:
Los elementos de los mapas permiten simular obst√°culos y restricciones de movimiento, lo cual es fundamental para el aprendizaje de navegaci√≥n y planificaci√≥n de trayectorias en rob√≥tica.`
      ]
    },
    {
      url: 'https://www.youtube.com/embed/jofV0_vv3lQ?si=bj6MCsvO1OrdD7Uk',
      title: 'Movimientos de la tortuga',
      description: [
  `En el tutorial se exploran las diferentes formas de controlar el movimiento de la tortuga en el simulador, desde su inicializaci√≥n hasta la personalizaci√≥n de su trazo.

El tutorial comienza explicando la importancia del bloque de inicializaci√≥n, el cual debe ejecutarse antes de enviar cualquier comando a la tortuga. Luego, mediante el bloque ‚Äúpublishtwist from turtle‚Äù, se muestra c√≥mo ajustar la velocidad lineal y angular para definir movimientos precisos.

Tambi√©n se ense√±a c√≥mo teletransportar a la tortuga a una posici√≥n espec√≠fica, c√≥mo activar o desactivar el l√°piz, y c√≥mo cambiar el color y grosor del trazo para obtener un mayor control visual sobre sus desplazamientos. Se abordan adem√°s las rotaciones de la tortuga y su aplicaci√≥n pr√°ctica dentro del entorno de simulaci√≥n.`,

  `üß† Conceptos clave del tutorial:

üìú Bloques esenciales para el movimiento:
La ejecuci√≥n siempre comienza con el bloque de inicializaci√≥n, asegurando que la tortuga est√© lista para interpretar comandos correctamente.

üîÑ Control preciso del movimiento:
El bloque ‚Äúpublish twist from turtle‚Äù permite definir la direcci√≥n y velocidad del desplazamiento.

üé® Personalizaci√≥n visual:
Modificar el color y el grosor del l√°piz permite visualizar los recorridos de forma personalizada.

üìç Teletransportaci√≥n controlada:
Establecer coordenadas espec√≠ficas para mover la tortuga ayuda a reforzar conceptos de posicionamiento espacial y l√≥gica de coordenadas en programaci√≥n.

‚è≥ Uso din√°mico del l√°piz:
Activar y desactivar el l√°piz en momentos espec√≠ficos evita trazos no deseados y permite un mayor control sobre cu√°ndo y c√≥mo se representan los movimientos.

üìà Rotaci√≥n efectiva:
Rotar la tortuga en grados espec√≠ficos introduce conceptos de transformaci√≥n espacial.`
      ]      
    },
    {
      url: 'https://www.youtube.com/embed/7EYOGoymTm0?si=Xav7hgLQ_FS8_UD3',
      title: 'Exportar el proyecto de ROSBlocks y probarlo en Ubuntu',
      description: [
`En este tutorial  se gu√≠a al usuario a trav√©s del proceso de exportaci√≥n de un proyecto para su ejecuci√≥n en una m√°quina con Linux, espec√≠ficamente Ubuntu 20.04.

Utilizando Turtlesim como ejemplo pr√°ctico, el tutorial muestra c√≥mo crear un nuevo nodo llamado ‚Äútortuga‚Äù y organizar su programaci√≥n utilizando bloques de inicio, movimiento y giro. Tambi√©n se configuran par√°metros como la velocidad lineal, la velocidad angular y temporizadores para secuenciar correctamente los movimientos.

Al finalizar, se explica detalladamente c√≥mo exportar el proyecto desde ROSBlocks, compilar el c√≥digo, y ejecutar el nodo en el simulador de Ubuntu, logrando as√≠ ver en pantalla los resultados del trabajo realizado.`,

  `üß† Conceptos clave del tutorial:
üåç Exportaci√≥n a Linux:
Exportar los proyectos a Ubuntu 20.04 permite ejecutar nodos ROS 2 en un entorno real, profesional y ampliamente utilizado en la industria.

üêç Ejecuci√≥n de comandos en terminal:
Aprender a utilizar la terminal de Linux para ejecutar nodos es una habilidad clave que prepara a los estudiantes para entornos de desarrollo reales.`
      ]
      
    }
    
  ];
  selectedTitle = '';
  selectedDescription: string[] = [];

  
}
